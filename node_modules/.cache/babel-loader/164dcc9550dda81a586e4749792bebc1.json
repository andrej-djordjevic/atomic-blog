{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\Sam\\\\react\\\\code\\\\sekcija-18\\\\atomic-blog\\\\atomic-blog\\\\src\\\\PostContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { faker } from \"@faker-js/faker\";\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase()\n  };\n}\n\nconst PostContext = /*#__PURE__*/createContext();\n\nfunction PostProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [posts, setPosts] = useState(() => Array.from({\n    length: 30\n  }, () => createRandomPost()));\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Derived state. These are the posts that will actually be displayed\n\n  const searchedPosts = searchQuery.length > 0 ? posts.filter(post => `${post.title} ${post.body}`.toLowerCase().includes(searchQuery.toLowerCase())) : posts;\n\n  function handleAddPost(post) {\n    setPosts(posts => [post, ...posts]);\n  }\n\n  function handleClearPosts() {\n    setPosts([]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts: searchedPosts,\n      onAddPost: handleAddPost,\n      onClearPosts: handleClearPosts,\n      searchQuery,\n      setSearchQuery\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostProvider, \"IIgvfwXtAm3eXUr7HRsVYhSvhoQ=\");\n\n_c = PostProvider;\n\nfunction usePosts() {\n  _s2();\n\n  const context = useContext(PostContext);\n  if (context === undefined) throw new Error(\"Lose nema PostContexta\");\n  return context;\n}\n\n_s2(usePosts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { PostProvider, usePosts };\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"names":["faker","createContext","useContext","useState","createRandomPost","title","hacker","adjective","noun","body","phrase","PostContext","PostProvider","children","posts","setPosts","Array","from","length","searchQuery","setSearchQuery","searchedPosts","filter","post","toLowerCase","includes","handleAddPost","handleClearPosts","onAddPost","onClearPosts","usePosts","context","undefined","Error"],"sources":["C:/Users/Andrej/Documents/Sam/react/code/sekcija-18/atomic-blog/atomic-blog/src/PostContext.js"],"sourcesContent":["import { faker } from \"@faker-js/faker\";\r\nimport { createContext, useContext, useState } from \"react\";\r\n\r\nfunction createRandomPost() {\r\n  return {\r\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\r\n    body: faker.hacker.phrase(),\r\n  };\r\n}\r\n\r\nconst PostContext = createContext();\r\n\r\nfunction PostProvider({ children }) {\r\n  const [posts, setPosts] = useState(() =>\r\n    Array.from({ length: 30 }, () => createRandomPost())\r\n  );\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  // Derived state. These are the posts that will actually be displayed\r\n  const searchedPosts =\r\n    searchQuery.length > 0\r\n      ? posts.filter((post) =>\r\n          `${post.title} ${post.body}`\r\n            .toLowerCase()\r\n            .includes(searchQuery.toLowerCase())\r\n        )\r\n      : posts;\r\n\r\n  function handleAddPost(post) {\r\n    setPosts((posts) => [post, ...posts]);\r\n  }\r\n\r\n  function handleClearPosts() {\r\n    setPosts([]);\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <PostContext.Provider\r\n      value={{\r\n        posts: searchedPosts,\r\n        onAddPost: handleAddPost,\r\n        onClearPosts: handleClearPosts,\r\n        searchQuery,\r\n        setSearchQuery,\r\n      }}\r\n    >\r\n      {children}\r\n    </PostContext.Provider>\r\n  );\r\n}\r\nfunction usePosts() {\r\n  const context = useContext(PostContext);\r\n  if (context === undefined) throw new Error(\"Lose nema PostContexta\");\r\n  return context;\r\n}\r\nexport { PostProvider, usePosts };\r\n"],"mappings":";;;;AAAA,SAASA,KAAT,QAAsB,iBAAtB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;;;AAEA,SAASC,gBAAT,GAA4B;EAC1B,OAAO;IACLC,KAAK,EAAG,GAAEL,KAAK,CAACM,MAAN,CAAaC,SAAb,EAAyB,IAAGP,KAAK,CAACM,MAAN,CAAaE,IAAb,EAAoB,EADrD;IAELC,IAAI,EAAET,KAAK,CAACM,MAAN,CAAaI,MAAb;EAFD,CAAP;AAID;;AAED,MAAMC,WAAW,gBAAGV,aAAa,EAAjC;;AAEA,SAASW,YAAT,OAAoC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAClC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,MACjCa,KAAK,CAACC,IAAN,CAAW;IAAEC,MAAM,EAAE;EAAV,CAAX,EAA2B,MAAMd,gBAAgB,EAAjD,CADgC,CAAlC;EAGA,MAAM,CAACe,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C,CAJkC,CAMlC;;EACA,MAAMkB,aAAa,GACjBF,WAAW,CAACD,MAAZ,GAAqB,CAArB,GACIJ,KAAK,CAACQ,MAAN,CAAcC,IAAD,IACV,GAAEA,IAAI,CAAClB,KAAM,IAAGkB,IAAI,CAACd,IAAK,EAA3B,CACGe,WADH,GAEGC,QAFH,CAEYN,WAAW,CAACK,WAAZ,EAFZ,CADF,CADJ,GAMIV,KAPN;;EASA,SAASY,aAAT,CAAuBH,IAAvB,EAA6B;IAC3BR,QAAQ,CAAED,KAAD,IAAW,CAACS,IAAD,EAAO,GAAGT,KAAV,CAAZ,CAAR;EACD;;EAED,SAASa,gBAAT,GAA4B;IAC1BZ,QAAQ,CAAC,EAAD,CAAR;EACD;;EAID,oBACE,QAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MACLD,KAAK,EAAEO,aADF;MAELO,SAAS,EAAEF,aAFN;MAGLG,YAAY,EAAEF,gBAHT;MAILR,WAJK;MAKLC;IALK,CADT;IAAA,UASGP;EATH;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GAvCQD,Y;;KAAAA,Y;;AAwCT,SAASkB,QAAT,GAAoB;EAAA;;EAClB,MAAMC,OAAO,GAAG7B,UAAU,CAACS,WAAD,CAA1B;EACA,IAAIoB,OAAO,KAAKC,SAAhB,EAA2B,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;EAC3B,OAAOF,OAAP;AACD;;IAJQD,Q;;AAKT,SAASlB,YAAT,EAAuBkB,QAAvB"},"metadata":{},"sourceType":"module"}